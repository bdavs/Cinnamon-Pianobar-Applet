const Applet = imports.ui.applet;
const St = imports.gi.St;
const Cinnamon = imports.gi.Cinnamon;
const Lang = imports.lang;
const Main = imports.ui.main;
const Mainloop = imports.mainloop;
const Gettext = imports.gettext;
const UUID = "nowplaying@cinnamon.org";
const GLib = imports.gi.GLib;
const PopupMenu = imports.ui.popupMenu;
const Util = imports.misc.util;

const PWD = "/home/bobby/.local/share/cinnamon/applets/nowplaying@cinnamon.org";

Gettext.bindtextdomain(UUID, GLib.get_home_dir() + "/.local/share/locale")

function _(str) {
    return Gettext.dgettext(UUID, str);
}
function MyApplet(orientation, panel_height, instane_id) {
    this._init(orientation, panel_height, instane_id);
}

MyApplet.prototype = {
__proto__:
    Applet.TextIconApplet.prototype,
_timeout:
    null,

_init:
    function(orientation, panel_height, instane_id) {
        Applet.TextIconApplet.prototype._init.call(this, orientation, panel_height, instane_id);

        try {
            this._applet_label.set_style('text-align: left');
            this.set_applet_icon_symbolic_name("audio-headphones");//"media-playback-start");

            this.recentSongs = 0;
            this.first_line = "";
            this._refresh();
            this._timeout = Mainloop.timeout_add_seconds(1, Lang.bind(this, this._refresh));

            this.menuManager = new PopupMenu.PopupMenuManager(this);
            this.menu = new Applet.AppletPopupMenu(this, orientation);
            this.menuManager.addMenu(this.menu);
            this._contentSection = new PopupMenu.PopupMenuSection(_("Music")); // this.menu.addMenuItem(this._contentSection);

            this.addRecentSongs();

            this.menu.box.get_children().forEach(function(c) {
                c.destroy()
            });
        }
        catch (e) {

            global.logError(e);
        }
    },
initializeButtons:
    function()
    {

// play pause
        item = new PopupMenu.PopupIconMenuItem(_("Play/Pause"),"media-playback-pause",St.IconType.SYMBOLIC);
        item.connect('activate',Lang.bind(this,function() {
            Util.spawnCommandLine(PWD + "/helper.sh p");
        }));
        this.menu.addMenuItem(item);

// next song
        item = new PopupMenu.PopupIconMenuItem(_("Next Song"),"media-skip-forward",St.IconType.SYMBOLIC);
        item.connect('activate',Lang.bind(this,function() {
            Util.spawnCommandLine(PWD + "/helper.sh n");
        }));
        this.menu.addMenuItem(item);

// favorite
        item = new PopupMenu.PopupIconMenuItem(_("Favorite"),"emblem-favorite",St.IconType.SYMBOLIC);
        item.connect('activate',Lang.bind(this,function() {
            Util.spawnCommandLine(PWD + "/helper.sh +");
        }));
        this.menu.addMenuItem(item);


    },
addStartButton:
    function()
    {
        if(this.first_line == "Not running") {
            startItem = new PopupMenu.PopupMenuItem("Start Pianobar");
            startItem.connect('activate',Lang.bind(this,function() {
                Util.spawnCommandLine(PWD + "/helper.sh start");
            }));
            this.menu.addMenuItem(startItem);
        }
// else{


// this.menu.get_children().forEach(function(c){ // c.destroy() // }); // }
    },
addRecentSongs:
    function()
    {
        songItem = new PopupMenu.PopupMenuItem(this.first_line);
        this.menu.addMenuItem(songItem);
        //this.menu.addMenuItem(_contentSection);
    },
_refresh: function()
    {
        this.addStartButton();

        Util.spawnCommandLine(PWD + "/helper.sh working");
        this.first_line=Cinnamon.get_file_contents_utf8_sync('/home/bobby/.config/pianobar/nowplaying').split("\n")[0];
        this.second_line=Cinnamon.get_file_contents_utf8_sync('/home/bobby/.config/pianobar/nowplaying').split("\n")[1];
        let favorite=Cinnamon.get_file_contents_utf8_sync('/home/bobby/.config/pianobar/nowplaying').split("\n")[2];
        if(favorite=='1') {
            this.first_line = this.first_line + " <3";
            this.second_line = this.second_line + " <3";
        }
        this.set_applet_tooltip(this.second_line);
        this.set_applet_label(this.first_line);
        return true;
    },

on_applet_removed_from_panel:
    function() {
        if(this._timeout) {
            Mainloop.source_remove(this._timeout);
            this._timeout=null;
        }
    },

on_applet_clicked:
    function() {
        this.menu.toggle();
    },
};

function main(metadata, orientation, panel_height, instance_id) {
    let myApplet = new MyApplet(orientation, panel_height, instance_id);
    return myApplet;
}
